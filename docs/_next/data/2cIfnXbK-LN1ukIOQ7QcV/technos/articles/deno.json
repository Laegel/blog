{"pageProps":{"content":"<img class=\"m-auto mb-6 rounded-sm\" width=\"200\" src=\"/images/deno.svg\"/><h1 class=\"text-5xl text-primary text-center font-bold mb-6 !leading-tight\">Deno</h1><div class=\"text-center text-sm mb-4\">Le 27 décembre 2021</div><p class=\"mb-4\">Apparu en 2018, vous en avez probablement déjà entendu parler sans réellement vous y intéresser.</p><p class=\"mb-4\">Deno (prononcez &quot;Dino&quot; avec un &quot;i&quot; long, non pas &quot;Déno&quot;) a été conçu et lancé par <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://tinyclouds.org/\">Ryan Dahl</a> et est <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://github.com/denoland\">développé par une équipe</a> et sa communauté grandissante. Décrit brièvement, c&#39;est un environnement d&#39;exécution pour JavaScript (JS) et TypeScript (TS) développé en <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://www.rust-lang.org/fr\">Rust</a> qui utilise <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://github.com/swc-project/swc\">Speedy Web Compiler</a> pour compiler le code JS/TS à fournir à <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://v8.dev/\">V8</a>.</p><p class=\"mb-4\">L&#39;objectif en créant Deno, dont le nom est l&#39;inversion des syllabes de Node(.js), était de palier à plusieurs défauts de conception de Node.js.</p>\n      <h3 class=\"text-xl text-primary mb-2\">\n        Un environnement plus sûr (parce que rien n&#39;est inviolable)\n      </h3><p class=\"mb-4\">Il est nécessaire d&#39;utiliser des indicateurs de ligne de commande pour <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://deno.land/manual@v1.17.1/getting_started/permissions\">autoriser Deno à accéder à certaines fonctionalités du système d&#39;exploitation (OS)</a>.\nNode.js et les node_modules sont loin d&#39;être des modèles en matière de sécurité ; les rapports fréquents concernant des failles de sécurité émanant de paquets hébergés par NPM (que vous téléchargez quotidiennement) le montrent.</p><pre><code class=\"language-sh hljs mb-4 rounded-sm\"><span class=\"hljs-comment\"># Audit d&#x27;un package.json pas tout-à-fait à jour</span>\n&gt; yarn audit\n...\n81 vulnerabilities found - Packages audited: 2956\nSeverity: 10 Low | 37 Moderate | 31 High | 3 Critical <span class=\"hljs-comment\"># Oups !</span>\n</code></pre>\n\n      <h3 class=\"text-xl text-primary mb-2\">\n        Une interface de programmation plus intuitive\n      </h3><p class=\"mb-4\">L&#39;API de Deno utilise des objets <code>Promise</code> plutôt que des fonctions de rappel, beaucoup plus raccord avec du JS/TS moderne. </p><p class=\"mb-4\">Deno :</p><pre><code class=\"language-ts hljs mb-4 rounded-sm\"><span class=\"hljs-keyword\">const</span> textPromise = <span class=\"hljs-title class_\">Deno</span>.<span class=\"hljs-title function_\">readTextFile</span>(<span class=\"hljs-string\">&quot;./data.txt&quot;</span>);\n\ntextPromise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response);\n}).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n});\n</code></pre>\n<p class=\"mb-4\">Node.js (version initiale) :</p><pre><code class=\"language-js hljs mb-4 rounded-sm\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>);\nfs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&quot;./data.txt&quot;</span>, <span class=\"hljs-string\">&quot;utf8&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">error, data</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (error) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n});\n</code></pre>\n<p class=\"mb-4\">Node.js (version promesses) :</p><pre><code class=\"language-js hljs mb-4 rounded-sm\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>).<span class=\"hljs-property\">promises</span>;\n\n<span class=\"hljs-keyword\">const</span> textPromise = fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&quot;./data.txt&quot;</span>, <span class=\"hljs-string\">&quot;utf8&quot;</span>);\n\ntextPromise.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(response);\n}).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n});\n</code></pre>\n\n      <h3 class=\"text-xl text-primary mb-2\">\n        Les dépendances font partie intégrante du projet\n      </h3><p class=\"mb-4\">Deno n&#39;utilise pas de gestionnaire de paquets mais télécharge directement les dépendances que l&#39;on renseigne dans le code via un module <code>deps.ts</code> (ou <code>deps_dev.ts</code> pour les paquets de développement uniquement). </p><p class=\"mb-4\">De plus, Deno utilise un système de résolution de module qui nous permet de personnaliser les imports, <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://deno.land/manual/linking_to_external_code/import_maps\">import-maps</a>.</p><p class=\"mb-4\">Sachant que Deno n&#39;utilise que des modules ECMAScript (ESM), vous ne pourrez pas utiliser des paquets npm aux formats d&#39;import en CommonJS/UMD sans les <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://esm.sh/\">convertir au préalable</a>.</p>\n      <h3 class=\"text-xl text-primary mb-2\">\n        TypeScript (TS) et JSX/TSX sont exécutés en toute transparence\n      </h3><p class=\"mb-4\">Bien que toujours transpilé avant d&#39;être compilé puis exécuté, TS peut désormais être utilisé sans configurer quoi que ce soit en supplément. </p>\n      <h3 class=\"text-xl text-primary mb-2\">\n        Et plein d&#39;autres bonnes choses !\n      </h3><p class=\"mb-4\">Deno peut compiler une application en un fichier exécutable en compilation multi-plateformes.</p><p class=\"mb-4\">Il intègre son propre système de tests, de formattage, d&#39;empaquetage, d&#39;analyse statique.</p><hr class=\"!my-6 m-auto text-primary max-w-screen-md\"/><p class=\"mb-4\">Deno est encore jeune mais est déjà stable et utilisable en production, à condition de se renseigner sur la sensibilité des fonctionnalités concernées. Le but de Deno n&#39;est pas de remplacer Node.js, inutile donc de vous imposer des migrations de projets Node.js vers Deno si ceux-ci fonctionnent parfaitement.</p><p class=\"mb-4\">Pour ma part, le runtime me semble apporter un réél plus au niveau de l&#39;expérience développeur, il se peut que je m&#39;en serve davantage à l&#39;avenir !</p>"},"__N_SSG":true}