{"pageProps":{"content":"<h1 class=\"text-5xl text-primary text-center font-bold mb-6 !leading-tight\">React: Class to Functional</h1><div class=\"text-center text-sm mb-4\">Le 2 avril 2022</div><p class=\"mb-4\">Voici <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://marketplace.visualstudio.com/items?itemName=Laegel.react-class-to-functional\">ma toute première extension VS Code</a> : un codemod qui transforme un composant React avec la syntaxe classe vers la syntaxe fonctionnelle.</p>\n        <h2 class=\"text-3xl text-primary mb-4\">\n          Pour quoi faire ? Les classes, c&#39;est cool.\n        </h2><p class=\"mb-4\">Il y a de nombreux inconvénients à utiliser React avec la syntaxe classe :</p><ul class=\"mb-4 list-disc pl-6\"><li>il faut plus de code pour un résultat similaire (verbosité) ;</li>\n<li>l&#39;utilisation des classes et <code>this</code> n&#39;est pas intuitive pour tout le monde ;</li>\n<li><a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://fr.reactjs.org/docs/composition-vs-inheritance.html\">l&#39;héritage est déconseillé au profit de la composition</a> ;</li>\n<li>le succès des hooks est tel qu&#39;il est désormais beaucoup plus difficile de trouver des tutoriels pour développer avec des classes (si vous recrutez des juniors, ayez ça en tête).</li>\n</ul><p class=\"mb-4\">Personnellement, j&#39;ai tendance à favoriser le fonctionnel en JavaScript/TypeScript, plus cohérent avec la nature du langage que la déclaration de classes (même si tout est objet mais c&#39;est une autre histoire). Sachant que j&#39;ai appris <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://rescript-lang.org/docs/react/latest/introduction\">React avec ReScript</a>, la syntaxe fonctionnelle est pour moi beaucoup plus naturelle.</p>\n        <h2 class=\"text-3xl text-primary mb-4\">\n          Comment ça marche ?\n        </h2><p class=\"mb-4\">Dans cette extension se trouve un script qui va analyser du code en détectant les déclarations de composants React sous forme de classe, littéralement <code>class MyComponent extends React.Component</code>. </p><p class=\"mb-4\">Pour transformer un composant-classe en composant-fonction, les étapes suivantes sont effectuées :</p><ul class=\"mb-4 list-disc pl-6\"><li>la méthode <code>render</code> devient le composant-fonction ;</li>\n<li>les méthodes <code>componentDidMount</code>, <code>componentDidUpdate</code> et <code>componentWillUnmount</code> sont transformées en appels à <code>useEffect</code> ;</li>\n<li>les appels <code>React.createRef</code> sont transformés en appels <code>useRef</code> ;</li>\n<li>la propriété <code>state</code> est découpée en de multiples appels à <code>useState</code> ;</li>\n<li>les <code>props</code> sont récupérées et utilisées en tant qu&#39;argument de la fonction ;</li>\n<li>les méthodes sont transformées en de simples fonctions internes ;</li>\n<li>les propriétés sont transformées en des appels à <code>useRef</code> ;</li>\n<li>les mots-clés <code>this</code> sont supprimés ;</li>\n<li>l&#39;interface de l&#39;état du composant (si elle existe) est supprimée ;</li>\n<li>l&#39;import de React est adapté en conséquence.</li>\n</ul><p class=\"mb-4\">Installez l&#39;extension, ouvrez un fichier qui contient des classes et exécutez la commande <code>react-class-to-functional.transform</code> depuis la palette de VS Code.</p><hr class=\"!my-6 m-auto text-primary max-w-screen-md\"/><p class=\"mb-4\">Si ça vous plaît, laissez une étoile sur le repo ! Je compte faire évoluer cette extension pour plus de possibilités et une meilleure ergonomie. N&#39;hésitez pas à remonter les erreurs en créant des issues sur GitHub. </p><p class=\"mb-4\">Le code est <a class=\"text-primary underline underline-offset-1\" target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://github.com/Laegel/react-class-to-function\">disponible ici</a>.</p>"},"__N_SSG":true}