(()=>{var t=Object.defineProperty,u=Object.defineProperties;var c=Object.getOwnPropertyDescriptors;var l=Object.getOwnPropertySymbols;var d=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable;var o=(e,s,n)=>s in e?t(e,s,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[s]=n,i=(e,s)=>{for(var n in s||(s={}))d.call(s,n)&&o(e,n,s[n]);if(l)for(var n of l(s))m.call(s,n)&&o(e,n,s[n]);return e},p=(e,s)=>u(e,c(s)),g=e=>t(e,"__esModule",{value:!0});var y=(e,s)=>{g(e);for(var n in s)t(e,n,{get:s[n],enumerable:!0})};var r={};y(r,{default:()=>a});var{createElement:h}=__ALEPH__.pack["https://esm.sh/react@17.0.2"],{default:f}=__ALEPH__.pack["https://deno.land/x/aleph@v0.3.0-beta.19/framework/react/components/HTMLPage.ts"];function a(e){return h(f,p(i({},e),{html:`<h1 class="text-5xl text-primary text-center font-bold mb-6 !leading-tight">Introduction au typage dans Python</h1><div class="text-center text-sm mb-4">Le 2 f\xE9vrier 2022</div><p class="mb-4">Python, le langage dont la popularit\xE9 ne cesse de cro\xEEtre de par sa facilit\xE9 d&#39;apprentissage et d&#39;utilisation, catalogu\xE9 comme LA technologie \xE0 utiliser en Machine Learning est, comme beaucoup d&#39;autres, un langage \xE0 typage dynamique. 
Le typage dynamique a ses avantages, c&#39;est ind\xE9niable : \xE7a permet de d\xE9velopper rapidement en mettant de c\xF4t\xE9 l&#39;inconv\xE9nient principal des langages statiques, \xE0 savoir (notamment) la d\xE9claration explicite de type lors de la cr\xE9ation d&#39;une variable, la rigidit\xE9 de la gestion des arguments dans les fonctions et j&#39;en passe.</p>
        <h2 class="text-3xl text-primary mb-4">
          Quand et pourquoi ?
        </h2><p class="mb-4">Les propositions visant \xE0 th\xE9oriser puis introduire les annotations de type dans Python, les <a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://www.python.org/dev/peps/pep-0483/">PEP 483</a> et <a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://www.python.org/dev/peps/pep-0484/">PEP 484</a>, ont \xE9t\xE9 cr\xE9\xE9es en 2014. Les propositions ont \xE9t\xE9 \xE9tudi\xE9es et approuv\xE9es, permettant aux annotations de type de finalement faire leur apparition dans la version 3.5 des sp\xE9cifications du langage.</p><p class="mb-4">L&#39;introduction du syst\xE8me de typage dans Python avait pour but, je cite (en traduisant) :</p><blockquote class="italic border-l-4 border-primary pl-2"><p class="mb-4">de simplifier l&#39;analyse statique et la refactorisation, de potentiellement v\xE9rifier le typage \xE0 l&#39;ex\xE9cution du code et (dans certains contextes) de g\xE9n\xE9rer du code utilisant des informations de type.</p></blockquote><p class="mb-4">-- <a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://www.python.org/dev/peps/pep-0484/#rationale-and-goals">source</a></p><p class="mb-4">Dans cet article, je vais surtout m&#39;attarder sur l&#39;analyse statique et la refactorisation, deux techniques exploit\xE9es par les d\xE9vs au quotidien. <br>L&#39;analyse statique, c&#39;est tout ce qui nous permet de b\xE9n\xE9ficier d&#39;informations sur l&#39;utilisation de code. Vous voyez les infobulles de vos EDI, les vaguelettes lorsque vous avez mal orthographi\xE9 une variable ? C&#39;est gr\xE2ce \xE0 de l&#39;analyse statique qu&#39;elles sont pertinentes. <br>La refactorisation est un proc\xE9d\xE9 qui vise \xE0 r\xE9duire la complexit\xE9 du code, le rendre plus maintenable, plus efficace en fonction du besoin. Nous sommes amen\xE9s \xE0 refactoriser du code fr\xE9quemment et le typage sert de levier pour nous faciliter le travail.</p><p class="mb-4">A noter que d&#39;autres propositions (<a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://www.python.org/dev/peps/pep-0526/">PEP 526</a>) ont \xE9t\xE9 ajout\xE9es et d&#39;autres le seront dans l&#39;avenir afin d&#39;enrichir la fonctionnalit\xE9 de base.</p>
        <h2 class="text-3xl text-primary mb-4">
          Comment \xE7a fonctionne en pratique ?
        </h2>
      <h3 class="text-xl text-primary mb-2">
        Exemples simples d&#39;utilisation
      </h3><p class="mb-4">Le besoin de sp\xE9cifier un type peut appara\xEEtre \xE0 plusieurs endroits dans le code.</p><p class="mb-4">En d\xE9clarant une variable :</p><pre><code class="language-py hljs mb-4 rounded-sm">name: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Je contiens une cha\xEEne&quot;</span>
</code></pre>
<p class="mb-4">Sur les propri\xE9t\xE9s d&#39;une structure de donn\xE9es :</p><pre><code class="language-py hljs mb-4 rounded-sm"><span class="hljs-meta">@dataclass</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span>:</span>
    <span class="hljs-built_in">id</span>: <span class="hljs-built_in">int</span>
    title: <span class="hljs-built_in">str</span>
    content: <span class="hljs-built_in">str</span>
</code></pre>
<p class="mb-4">Sur les arguments et le retour d&#39;une fonction :</p><pre><code class="language-py hljs mb-4 rounded-sm"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multiply</span>(<span class="hljs-params">arg1: <span class="hljs-built_in">int</span>, arg2: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span>
    <span class="hljs-keyword">return</span> arg1 * arg2
</code></pre>

      <h3 class="text-xl text-primary mb-2">
        Typer, oui... mais pas n&#39;importe comment
      </h3><p class="mb-4">Dans les exemples pr\xE9c\xE9dents, j&#39;ai volontairement augment\xE9 la verbosit\xE9 du code afin de vous illustrer les possibilit\xE9s.
Dans la r\xE9alit\xE9, il n&#39;est pas n\xE9cessaire de typer tout, tout le temps : la plupart des langages \xE0 typage static b\xE9n\xE9ficient de ce qu&#39;on appelle la d\xE9duction de type, gr\xE2ce \xE0 l&#39;analyse statique. </p><p class="mb-4">Il est peu probable que vous deviez pr\xE9ciser le type d&#39;une variable que vous venez d&#39;assigner : </p><pre><code class="language-py hljs mb-4 rounded-sm">name = <span class="hljs-string">&quot;Je contiens une cha\xEEne&quot;</span> <span class="hljs-comment"># Le type de \`name\` est d\xE9duit, c&#x27;est un \`str\`</span>
</code></pre>
<p class="mb-4">sauf si vous utilisez un alias :</p><pre><code class="language-py hljs mb-4 rounded-sm">Token = <span class="hljs-built_in">str</span>
token: Token = <span class="hljs-string">&quot;12345678&quot;</span> <span class="hljs-comment"># Le type a \xE9t\xE9 explicit\xE9 car il ne pouvait \xEAtre d\xE9duit</span>
</code></pre>
<p class="mb-4">Vous n&#39;aurez pas non plus syst\xE9matiquement besoin de typer les retours de fonctions :</p><pre><code class="language-py hljs mb-4 rounded-sm"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multiply</span>(<span class="hljs-params">arg1: <span class="hljs-built_in">int</span>, arg2: <span class="hljs-built_in">int</span></span>):</span> <span class="hljs-comment"># Le type du retour est d\xE9duit, c&#x27;est un \`int\`</span>
    <span class="hljs-keyword">return</span> arg1 * arg2
</code></pre>
<p class="mb-4">En fait, les seuls moments o\xF9 \xE7a va s&#39;av\xE9rer obligatoire, c&#39;est lorsqu&#39;on va devoir passer par de la d\xE9finition de structures (telles que les <code>dataclass</code>) ou que les types sont trop ambigus ou inexistants, donc impossibles \xE0 d\xE9duire.</p>
        <h2 class="text-3xl text-primary mb-4">
          Des tas d&#39;outils pratiques pour travailler avec les types
        </h2><p class="mb-4">En quelques ann\xE9es, la communaut\xE9 a eu le temps de mettre au point des outils pour se faciliter la vie.<br>Sachant qu&#39;il arrive souvent qu&#39;on utilise une biblioth\xE8que non typ\xE9e, certains outils peuvent s&#39;av\xE9rer particuli\xE8rement int\xE9ressants puisqu&#39;ils peuvent g\xE9n\xE9rer les types en lisant le code : ce sont des g\xE9n\xE9rateurs de types.
En voici un \xE9chantillon :</p><ul class="mb-4 list-disc pl-6"><li><a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="http://mypy-lang.org/">mypy</a>, outil d&#39;analyse statique, g\xE9n\xE9rateur de types</li>
<li><a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://pyre-check.org/">Pyre</a>, outil d&#39;analyse statique, g\xE9n\xE9rateur de types</li>
<li><a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://github.com/microsoft/pyright">Pyright</a>, outil d&#39;analyse statique, g\xE9n\xE9rateur de types + <a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://github.com/microsoft/pylance-release">Pylance</a>, son extension VS Code</li>
<li><a class="text-primary underline underline-offset-1" target="_blank" rel="noreferrer noopener nofollow" href="https://github.com/Instagram/MonkeyType">MonkeyType</a>, g\xE9n\xE9rateur de types</li>
</ul><hr class="!my-6 m-auto text-primary max-w-screen-md"/><p class="mb-4">Les annotations en Python ne servent qu&#39;\xE0 un seul objectif : <strong>rendre le code plus clair, plus explicite</strong>. Il n&#39;a <em>pas le moindre effet b\xE9n\xE9fique lors de son ex\xE9cution</em> et n&#39;am\xE9liore en rien ses performances (les imports des types vont plut\xF4t les r\xE9duire de mani\xE8re <em>n\xE9gligeable</em>). Bien que leur introduction remonte \xE0 2014, les annotations de type de Python ne sont pas aussi approfondies que ce qu&#39;on pourrait trouver avec TypeScript ou Rust et on peut rapidement se retrouver limit\xE9, par exemple avec les types g\xE9n\xE9riques.</p><p class="mb-4">Le point final n&#39;est pas de trancher sur le fait de favoriser un langage \xE0 typage statique par rapport \xE0 un langage \xE0 typage dynamique. A travers cette fonctionnalit\xE9, Python se rend plus versatile et, \xE0 mon avis, <strong>plus facile \xE0 maintenir</strong> dans de grosses applications et ce avec un excellent compromis temps/information gr\xE2ce \xE0 la d\xE9duction de type. </p><p class="mb-4">Utilisez-vous les annotations de type dans vos projets Python ? Si non, qu&#39;est-ce qui vous ferait changer d&#39;avis ? <br>Au contraire, voyez-vous des inconv\xE9nients majeurs contre leur utilisation ?</p>`}))}a.meta={title:"Introduction au typage dans Python",created:"2022-02-02T00:00:00.000Z",updated:"2022-02-02T00:00:00.000Z",series:"Le typage dans Python",tags:"python, dx"};__ALEPH__.pack["/pages/technos/articles/typage-python.md"]=r;})();
